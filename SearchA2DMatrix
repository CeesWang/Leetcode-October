class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        if (matrix.length == 1) {
            return binarySearch(matrix[0], 0, matrix[0].length - 1, target);
        }
        int low = 0;
        int high = matrix.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2; 
            if (matrix[mid][0] == target) {
                return true;
            }
            else if (matrix[mid][0] > target){
                high = mid - 1;
            }
            else {
                low = mid + 1;
            }
        }
        if (low > high && high != - 1) {
            return binarySearch(matrix[high], 0, matrix[high].length - 1, target);
        }
        return binarySearch(matrix[low], 0, matrix[low].length - 1, target); 
    }
    
    
    public boolean binarySearch (int[] matrix, int low, int high, int target) {
        while (low <= high) {
            int mid = low + (high - low) / 2; 
            if (matrix[mid] == target) {
                return true;
            }
            else if (matrix[mid] > target){
                high = mid - 1;
            }
            else {
                low = mid + 1;
            }
        }
        return false;
    }
}
