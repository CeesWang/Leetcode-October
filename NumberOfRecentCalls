class RecentCounter {
    int[] counterArr;
    public RecentCounter() {
        counterArr = new int [100000000]; 
    }
    
    public int ping(int t) {
        counterArr[t] = 1;
        if (t == 1) {
            return 1;
        }
        int count = 0;
        int idx = t - 3000;
        if (idx < 0) {
            idx = 1;
        }
        while (idx <= t) {
            if (counterArr[idx] == 1) count++;
            idx++;
        }
        return count;
        
    }
}

/**
 * Your RecentCounter object will be instantiated and called as such:
 * RecentCounter obj = new RecentCounter();
 * int param_1 = obj.ping(t);
 */
 
 class RecentCounter {
    PriorityQueue<Integer> pq;
    public RecentCounter() {
        pq = new PriorityQueue<>((a,b) -> b - a);
    }
    
    public int ping(int t) {
        pq.add(t);
        if (pq.size() == 1) {
            return 1;
        }
        int count = 0;
        PriorityQueue<Integer> pqCopy = new PriorityQueue<>(pq);
        while (pqCopy.peek() != t) {    // remove elements until t is on top;
            pqCopy.poll();
        }

        while (!pqCopy.isEmpty() && pqCopy.peek() >= t - 3000) {
            count++;
            pqCopy.poll();
        }
        return count;
        
    }
}

/**
 * Your RecentCounter object will be instantiated and called as such:
 * RecentCounter obj = new RecentCounter();
 * int param_1 = obj.ping(t);
 */
