/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null) {
            return head;
        }
        ArrayList<Integer> list = new ArrayList<>();
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        while (head != null) {
            list.add(head.val);
            head = head.next;
        }
        int size = list.size();
        for (int i = 0; i < size/2; ++i) {
            int temp = list.get(i);
            list.set(i, list.get(size - i - 1));
            list.set(size - i - 1, temp);
        }
        int idx = k % size;
        for (int i = 0; i < idx/2; ++i) {
            int temp = list.get(i);
            list.set(i, list.get(idx - i - 1));
            list.set(idx - i - 1, temp);
        }
        for (int i = 0; i < (size - idx) /2; ++i) {
            int temp = list.get(i + idx);
            list.set(i + idx, list.get(size - i - 1));
            list.set(size - i - 1, temp);
        }
        ListNode temp = dummy.next;
        for (int i = 0; i < size; ++i) {
            temp.val = list.get(i);
            temp = temp.next;
        }
        
        return dummy.next;        
    }
}
