class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> combinationList = new ArrayList<>();
        permutations(candidates, target, combinationList, new ArrayList<Integer>(), 0);
        return combinationList;
    }
    
    public void permutations(int[] candidates, int target, List<List<Integer>> combinationList, List<Integer> permutation, int start) {
        if (target < 0) {
            return;
        }
        if  (target == 0) {
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < permutation.size(); ++i) {
                list.add(permutation.get(i));
            }
            combinationList.add(list);
            return;
        }
        for (int i = start; i <candidates.length; ++i) {
            int candidate = candidates[i];
            permutation.add(candidate);
            permutations(candidates, target - candidate, combinationList, permutation, i);
            permutation.remove(permutation.size() - 1);
        }
    }
}
